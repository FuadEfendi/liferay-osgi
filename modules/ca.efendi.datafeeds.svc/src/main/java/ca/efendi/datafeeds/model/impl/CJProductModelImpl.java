/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ca.efendi.datafeeds.model.impl;

import aQute.bnd.annotation.ProviderType;

import ca.efendi.datafeeds.model.CJProduct;
import ca.efendi.datafeeds.model.CJProductModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CJProduct service. Represents a row in the &quot;FE_CJProduct&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CJProductModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CJProductImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CJProductImpl
 * @see CJProduct
 * @see CJProductModel
 * @generated
 */
@ProviderType
public class CJProductModelImpl extends BaseModelImpl<CJProduct>
	implements CJProductModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a c j product model instance should use the {@link CJProduct} interface instead.
	 */
	public static final String TABLE_NAME = "FE_CJProduct";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "productId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "programName", Types.VARCHAR },
			{ "catalogName", Types.VARCHAR },
			{ "sku", Types.VARCHAR },
			{ "programUrl", Types.VARCHAR },
			{ "lastUpdated", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "keywords", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "manufacturer", Types.VARCHAR },
			{ "manufacturerId", Types.VARCHAR },
			{ "currency_", Types.VARCHAR },
			{ "price", Types.VARCHAR },
			{ "buyUrl", Types.VARCHAR },
			{ "impressionUrl", Types.VARCHAR },
			{ "imageUrl", Types.VARCHAR },
			{ "inStock", Types.VARCHAR },
			{ "viewCount", Types.INTEGER },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "subtitle", Types.VARCHAR },
			{ "urlTitle", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "displayDate", Types.TIMESTAMP },
			{ "coverImageCaption", Types.VARCHAR },
			{ "coverImageFileEntryId", Types.BIGINT },
			{ "coverImageURL", Types.VARCHAR },
			{ "smallImage", Types.BOOLEAN },
			{ "smallImageFileEntryId", Types.BIGINT },
			{ "smallImageId", Types.BIGINT },
			{ "smallImageURL", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("programName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("catalogName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sku", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("programUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastUpdated", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("keywords", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manufacturerId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currency_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("price", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("buyUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("impressionUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inStock", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("viewCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("subtitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("urlTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("displayDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("coverImageCaption", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("coverImageFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("coverImageURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("smallImage", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("smallImageFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("smallImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("smallImageURL", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table FE_CJProduct (uuid_ VARCHAR(75) null,productId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,programName VARCHAR(75) null,catalogName VARCHAR(75) null,sku VARCHAR(77) null,programUrl VARCHAR(75) null,lastUpdated VARCHAR(75) null,name VARCHAR(1024) null,keywords VARCHAR(1024) null,description VARCHAR(2048) null,manufacturer VARCHAR(75) null,manufacturerId VARCHAR(75) null,currency_ VARCHAR(75) null,price VARCHAR(75) null,buyUrl VARCHAR(1024) null,impressionUrl VARCHAR(75) null,imageUrl VARCHAR(1024) null,inStock VARCHAR(75) null,viewCount INTEGER,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,subtitle VARCHAR(75) null,urlTitle VARCHAR(75) null,content VARCHAR(75) null,displayDate DATE null,coverImageCaption VARCHAR(75) null,coverImageFileEntryId LONG,coverImageURL VARCHAR(75) null,smallImage BOOLEAN,smallImageFileEntryId LONG,smallImageId LONG,smallImageURL VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table FE_CJProduct";
	public static final String ORDER_BY_JPQL = " ORDER BY cjProduct.manufacturer ASC, cjProduct.name DESC";
	public static final String ORDER_BY_SQL = " ORDER BY FE_CJProduct.manufacturer ASC, FE_CJProduct.name DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ca.efendi.datafeeds.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.ca.efendi.datafeeds.model.CJProduct"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ca.efendi.datafeeds.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.ca.efendi.datafeeds.model.CJProduct"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ca.efendi.datafeeds.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.ca.efendi.datafeeds.model.CJProduct"),
			true);
	public static final long CATALOGNAME_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long MANUFACTURER_COLUMN_BITMASK = 8L;
	public static final long PROGRAMNAME_COLUMN_BITMASK = 16L;
	public static final long SKU_COLUMN_BITMASK = 32L;
	public static final long UUID_COLUMN_BITMASK = 64L;
	public static final long NAME_COLUMN_BITMASK = 128L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ca.efendi.datafeeds.service.util.PropsUtil.get(
				"lock.expiration.time.ca.efendi.datafeeds.model.CJProduct"));

	public CJProductModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _productId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProductId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _productId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CJProduct.class;
	}

	@Override
	public String getModelClassName() {
		return CJProduct.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("productId", getProductId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("programName", getProgramName());
		attributes.put("catalogName", getCatalogName());
		attributes.put("sku", getSku());
		attributes.put("programUrl", getProgramUrl());
		attributes.put("lastUpdated", getLastUpdated());
		attributes.put("name", getName());
		attributes.put("keywords", getKeywords());
		attributes.put("description", getDescription());
		attributes.put("manufacturer", getManufacturer());
		attributes.put("manufacturerId", getManufacturerId());
		attributes.put("currency", getCurrency());
		attributes.put("price", getPrice());
		attributes.put("buyUrl", getBuyUrl());
		attributes.put("impressionUrl", getImpressionUrl());
		attributes.put("imageUrl", getImageUrl());
		attributes.put("inStock", getInStock());
		attributes.put("viewCount", getViewCount());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("subtitle", getSubtitle());
		attributes.put("urlTitle", getUrlTitle());
		attributes.put("content", getContent());
		attributes.put("displayDate", getDisplayDate());
		attributes.put("coverImageCaption", getCoverImageCaption());
		attributes.put("coverImageFileEntryId", getCoverImageFileEntryId());
		attributes.put("coverImageURL", getCoverImageURL());
		attributes.put("smallImage", getSmallImage());
		attributes.put("smallImageFileEntryId", getSmallImageFileEntryId());
		attributes.put("smallImageId", getSmallImageId());
		attributes.put("smallImageURL", getSmallImageURL());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long productId = (Long)attributes.get("productId");

		if (productId != null) {
			setProductId(productId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String programName = (String)attributes.get("programName");

		if (programName != null) {
			setProgramName(programName);
		}

		String catalogName = (String)attributes.get("catalogName");

		if (catalogName != null) {
			setCatalogName(catalogName);
		}

		String sku = (String)attributes.get("sku");

		if (sku != null) {
			setSku(sku);
		}

		String programUrl = (String)attributes.get("programUrl");

		if (programUrl != null) {
			setProgramUrl(programUrl);
		}

		String lastUpdated = (String)attributes.get("lastUpdated");

		if (lastUpdated != null) {
			setLastUpdated(lastUpdated);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String keywords = (String)attributes.get("keywords");

		if (keywords != null) {
			setKeywords(keywords);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String manufacturer = (String)attributes.get("manufacturer");

		if (manufacturer != null) {
			setManufacturer(manufacturer);
		}

		String manufacturerId = (String)attributes.get("manufacturerId");

		if (manufacturerId != null) {
			setManufacturerId(manufacturerId);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		String price = (String)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		String buyUrl = (String)attributes.get("buyUrl");

		if (buyUrl != null) {
			setBuyUrl(buyUrl);
		}

		String impressionUrl = (String)attributes.get("impressionUrl");

		if (impressionUrl != null) {
			setImpressionUrl(impressionUrl);
		}

		String imageUrl = (String)attributes.get("imageUrl");

		if (imageUrl != null) {
			setImageUrl(imageUrl);
		}

		String inStock = (String)attributes.get("inStock");

		if (inStock != null) {
			setInStock(inStock);
		}

		Integer viewCount = (Integer)attributes.get("viewCount");

		if (viewCount != null) {
			setViewCount(viewCount);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String subtitle = (String)attributes.get("subtitle");

		if (subtitle != null) {
			setSubtitle(subtitle);
		}

		String urlTitle = (String)attributes.get("urlTitle");

		if (urlTitle != null) {
			setUrlTitle(urlTitle);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Date displayDate = (Date)attributes.get("displayDate");

		if (displayDate != null) {
			setDisplayDate(displayDate);
		}

		String coverImageCaption = (String)attributes.get("coverImageCaption");

		if (coverImageCaption != null) {
			setCoverImageCaption(coverImageCaption);
		}

		Long coverImageFileEntryId = (Long)attributes.get(
				"coverImageFileEntryId");

		if (coverImageFileEntryId != null) {
			setCoverImageFileEntryId(coverImageFileEntryId);
		}

		String coverImageURL = (String)attributes.get("coverImageURL");

		if (coverImageURL != null) {
			setCoverImageURL(coverImageURL);
		}

		Boolean smallImage = (Boolean)attributes.get("smallImage");

		if (smallImage != null) {
			setSmallImage(smallImage);
		}

		Long smallImageFileEntryId = (Long)attributes.get(
				"smallImageFileEntryId");

		if (smallImageFileEntryId != null) {
			setSmallImageFileEntryId(smallImageFileEntryId);
		}

		Long smallImageId = (Long)attributes.get("smallImageId");

		if (smallImageId != null) {
			setSmallImageId(smallImageId);
		}

		String smallImageURL = (String)attributes.get("smallImageURL");

		if (smallImageURL != null) {
			setSmallImageURL(smallImageURL);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getProductId() {
		return _productId;
	}

	@Override
	public void setProductId(long productId) {
		_productId = productId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getProgramName() {
		if (_programName == null) {
			return StringPool.BLANK;
		}
		else {
			return _programName;
		}
	}

	@Override
	public void setProgramName(String programName) {
		_columnBitmask |= PROGRAMNAME_COLUMN_BITMASK;

		if (_originalProgramName == null) {
			_originalProgramName = _programName;
		}

		_programName = programName;
	}

	public String getOriginalProgramName() {
		return GetterUtil.getString(_originalProgramName);
	}

	@Override
	public String getCatalogName() {
		if (_catalogName == null) {
			return StringPool.BLANK;
		}
		else {
			return _catalogName;
		}
	}

	@Override
	public void setCatalogName(String catalogName) {
		_columnBitmask |= CATALOGNAME_COLUMN_BITMASK;

		if (_originalCatalogName == null) {
			_originalCatalogName = _catalogName;
		}

		_catalogName = catalogName;
	}

	public String getOriginalCatalogName() {
		return GetterUtil.getString(_originalCatalogName);
	}

	@Override
	public String getSku() {
		if (_sku == null) {
			return StringPool.BLANK;
		}
		else {
			return _sku;
		}
	}

	@Override
	public void setSku(String sku) {
		_columnBitmask |= SKU_COLUMN_BITMASK;

		if (_originalSku == null) {
			_originalSku = _sku;
		}

		_sku = sku;
	}

	public String getOriginalSku() {
		return GetterUtil.getString(_originalSku);
	}

	@Override
	public String getProgramUrl() {
		if (_programUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _programUrl;
		}
	}

	@Override
	public void setProgramUrl(String programUrl) {
		_programUrl = programUrl;
	}

	@Override
	public String getLastUpdated() {
		if (_lastUpdated == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastUpdated;
		}
	}

	@Override
	public void setLastUpdated(String lastUpdated) {
		_lastUpdated = lastUpdated;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@Override
	public String getKeywords() {
		if (_keywords == null) {
			return StringPool.BLANK;
		}
		else {
			return _keywords;
		}
	}

	@Override
	public void setKeywords(String keywords) {
		_keywords = keywords;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getManufacturer() {
		if (_manufacturer == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturer;
		}
	}

	@Override
	public void setManufacturer(String manufacturer) {
		_columnBitmask = -1L;

		if (_originalManufacturer == null) {
			_originalManufacturer = _manufacturer;
		}

		_manufacturer = manufacturer;
	}

	public String getOriginalManufacturer() {
		return GetterUtil.getString(_originalManufacturer);
	}

	@Override
	public String getManufacturerId() {
		if (_manufacturerId == null) {
			return StringPool.BLANK;
		}
		else {
			return _manufacturerId;
		}
	}

	@Override
	public void setManufacturerId(String manufacturerId) {
		_manufacturerId = manufacturerId;
	}

	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_currency = currency;
	}

	@Override
	public String getPrice() {
		if (_price == null) {
			return StringPool.BLANK;
		}
		else {
			return _price;
		}
	}

	@Override
	public void setPrice(String price) {
		_price = price;
	}

	@Override
	public String getBuyUrl() {
		if (_buyUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _buyUrl;
		}
	}

	@Override
	public void setBuyUrl(String buyUrl) {
		_buyUrl = buyUrl;
	}

	@Override
	public String getImpressionUrl() {
		if (_impressionUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _impressionUrl;
		}
	}

	@Override
	public void setImpressionUrl(String impressionUrl) {
		_impressionUrl = impressionUrl;
	}

	@Override
	public String getImageUrl() {
		if (_imageUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageUrl;
		}
	}

	@Override
	public void setImageUrl(String imageUrl) {
		_imageUrl = imageUrl;
	}

	@Override
	public String getInStock() {
		if (_inStock == null) {
			return StringPool.BLANK;
		}
		else {
			return _inStock;
		}
	}

	@Override
	public void setInStock(String inStock) {
		_inStock = inStock;
	}

	@Override
	public int getViewCount() {
		return _viewCount;
	}

	@Override
	public void setViewCount(int viewCount) {
		_viewCount = viewCount;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public String getSubtitle() {
		if (_subtitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _subtitle;
		}
	}

	@Override
	public void setSubtitle(String subtitle) {
		_subtitle = subtitle;
	}

	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		_urlTitle = urlTitle;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public Date getDisplayDate() {
		return _displayDate;
	}

	@Override
	public void setDisplayDate(Date displayDate) {
		_displayDate = displayDate;
	}

	@Override
	public String getCoverImageCaption() {
		if (_coverImageCaption == null) {
			return StringPool.BLANK;
		}
		else {
			return _coverImageCaption;
		}
	}

	@Override
	public void setCoverImageCaption(String coverImageCaption) {
		_coverImageCaption = coverImageCaption;
	}

	@Override
	public long getCoverImageFileEntryId() {
		return _coverImageFileEntryId;
	}

	@Override
	public void setCoverImageFileEntryId(long coverImageFileEntryId) {
		_coverImageFileEntryId = coverImageFileEntryId;
	}

	@Override
	public String getCoverImageURL() {
		if (_coverImageURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _coverImageURL;
		}
	}

	@Override
	public void setCoverImageURL(String coverImageURL) {
		_coverImageURL = coverImageURL;
	}

	@Override
	public boolean getSmallImage() {
		return _smallImage;
	}

	@Override
	public boolean isSmallImage() {
		return _smallImage;
	}

	@Override
	public void setSmallImage(boolean smallImage) {
		_smallImage = smallImage;
	}

	@Override
	public long getSmallImageFileEntryId() {
		return _smallImageFileEntryId;
	}

	@Override
	public void setSmallImageFileEntryId(long smallImageFileEntryId) {
		_smallImageFileEntryId = smallImageFileEntryId;
	}

	@Override
	public long getSmallImageId() {
		return _smallImageId;
	}

	@Override
	public void setSmallImageId(long smallImageId) {
		_smallImageId = smallImageId;
	}

	@Override
	public String getSmallImageURL() {
		if (_smallImageURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _smallImageURL;
		}
	}

	@Override
	public void setSmallImageURL(String smallImageURL) {
		_smallImageURL = smallImageURL;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				CJProduct.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CJProduct.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CJProduct toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CJProduct)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CJProductImpl cjProductImpl = new CJProductImpl();

		cjProductImpl.setUuid(getUuid());
		cjProductImpl.setProductId(getProductId());
		cjProductImpl.setGroupId(getGroupId());
		cjProductImpl.setCompanyId(getCompanyId());
		cjProductImpl.setUserId(getUserId());
		cjProductImpl.setUserName(getUserName());
		cjProductImpl.setCreateDate(getCreateDate());
		cjProductImpl.setModifiedDate(getModifiedDate());
		cjProductImpl.setProgramName(getProgramName());
		cjProductImpl.setCatalogName(getCatalogName());
		cjProductImpl.setSku(getSku());
		cjProductImpl.setProgramUrl(getProgramUrl());
		cjProductImpl.setLastUpdated(getLastUpdated());
		cjProductImpl.setName(getName());
		cjProductImpl.setKeywords(getKeywords());
		cjProductImpl.setDescription(getDescription());
		cjProductImpl.setManufacturer(getManufacturer());
		cjProductImpl.setManufacturerId(getManufacturerId());
		cjProductImpl.setCurrency(getCurrency());
		cjProductImpl.setPrice(getPrice());
		cjProductImpl.setBuyUrl(getBuyUrl());
		cjProductImpl.setImpressionUrl(getImpressionUrl());
		cjProductImpl.setImageUrl(getImageUrl());
		cjProductImpl.setInStock(getInStock());
		cjProductImpl.setViewCount(getViewCount());
		cjProductImpl.setStatus(getStatus());
		cjProductImpl.setStatusByUserId(getStatusByUserId());
		cjProductImpl.setStatusByUserName(getStatusByUserName());
		cjProductImpl.setStatusDate(getStatusDate());
		cjProductImpl.setSubtitle(getSubtitle());
		cjProductImpl.setUrlTitle(getUrlTitle());
		cjProductImpl.setContent(getContent());
		cjProductImpl.setDisplayDate(getDisplayDate());
		cjProductImpl.setCoverImageCaption(getCoverImageCaption());
		cjProductImpl.setCoverImageFileEntryId(getCoverImageFileEntryId());
		cjProductImpl.setCoverImageURL(getCoverImageURL());
		cjProductImpl.setSmallImage(getSmallImage());
		cjProductImpl.setSmallImageFileEntryId(getSmallImageFileEntryId());
		cjProductImpl.setSmallImageId(getSmallImageId());
		cjProductImpl.setSmallImageURL(getSmallImageURL());

		cjProductImpl.resetOriginalValues();

		return cjProductImpl;
	}

	@Override
	public int compareTo(CJProduct cjProduct) {
		int value = 0;

		value = getManufacturer().compareTo(cjProduct.getManufacturer());

		if (value != 0) {
			return value;
		}

		value = getName().compareTo(cjProduct.getName());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CJProduct)) {
			return false;
		}

		CJProduct cjProduct = (CJProduct)obj;

		long primaryKey = cjProduct.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CJProductModelImpl cjProductModelImpl = this;

		cjProductModelImpl._originalUuid = cjProductModelImpl._uuid;

		cjProductModelImpl._originalGroupId = cjProductModelImpl._groupId;

		cjProductModelImpl._setOriginalGroupId = false;

		cjProductModelImpl._originalCompanyId = cjProductModelImpl._companyId;

		cjProductModelImpl._setOriginalCompanyId = false;

		cjProductModelImpl._setModifiedDate = false;

		cjProductModelImpl._originalProgramName = cjProductModelImpl._programName;

		cjProductModelImpl._originalCatalogName = cjProductModelImpl._catalogName;

		cjProductModelImpl._originalSku = cjProductModelImpl._sku;

		cjProductModelImpl._originalManufacturer = cjProductModelImpl._manufacturer;

		cjProductModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CJProduct> toCacheModel() {
		CJProductCacheModel cjProductCacheModel = new CJProductCacheModel();

		cjProductCacheModel.uuid = getUuid();

		String uuid = cjProductCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cjProductCacheModel.uuid = null;
		}

		cjProductCacheModel.productId = getProductId();

		cjProductCacheModel.groupId = getGroupId();

		cjProductCacheModel.companyId = getCompanyId();

		cjProductCacheModel.userId = getUserId();

		cjProductCacheModel.userName = getUserName();

		String userName = cjProductCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cjProductCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cjProductCacheModel.createDate = createDate.getTime();
		}
		else {
			cjProductCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cjProductCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cjProductCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cjProductCacheModel.programName = getProgramName();

		String programName = cjProductCacheModel.programName;

		if ((programName != null) && (programName.length() == 0)) {
			cjProductCacheModel.programName = null;
		}

		cjProductCacheModel.catalogName = getCatalogName();

		String catalogName = cjProductCacheModel.catalogName;

		if ((catalogName != null) && (catalogName.length() == 0)) {
			cjProductCacheModel.catalogName = null;
		}

		cjProductCacheModel.sku = getSku();

		String sku = cjProductCacheModel.sku;

		if ((sku != null) && (sku.length() == 0)) {
			cjProductCacheModel.sku = null;
		}

		cjProductCacheModel.programUrl = getProgramUrl();

		String programUrl = cjProductCacheModel.programUrl;

		if ((programUrl != null) && (programUrl.length() == 0)) {
			cjProductCacheModel.programUrl = null;
		}

		cjProductCacheModel.lastUpdated = getLastUpdated();

		String lastUpdated = cjProductCacheModel.lastUpdated;

		if ((lastUpdated != null) && (lastUpdated.length() == 0)) {
			cjProductCacheModel.lastUpdated = null;
		}

		cjProductCacheModel.name = getName();

		String name = cjProductCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			cjProductCacheModel.name = null;
		}

		cjProductCacheModel.keywords = getKeywords();

		String keywords = cjProductCacheModel.keywords;

		if ((keywords != null) && (keywords.length() == 0)) {
			cjProductCacheModel.keywords = null;
		}

		cjProductCacheModel.description = getDescription();

		String description = cjProductCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			cjProductCacheModel.description = null;
		}

		cjProductCacheModel.manufacturer = getManufacturer();

		String manufacturer = cjProductCacheModel.manufacturer;

		if ((manufacturer != null) && (manufacturer.length() == 0)) {
			cjProductCacheModel.manufacturer = null;
		}

		cjProductCacheModel.manufacturerId = getManufacturerId();

		String manufacturerId = cjProductCacheModel.manufacturerId;

		if ((manufacturerId != null) && (manufacturerId.length() == 0)) {
			cjProductCacheModel.manufacturerId = null;
		}

		cjProductCacheModel.currency = getCurrency();

		String currency = cjProductCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			cjProductCacheModel.currency = null;
		}

		cjProductCacheModel.price = getPrice();

		String price = cjProductCacheModel.price;

		if ((price != null) && (price.length() == 0)) {
			cjProductCacheModel.price = null;
		}

		cjProductCacheModel.buyUrl = getBuyUrl();

		String buyUrl = cjProductCacheModel.buyUrl;

		if ((buyUrl != null) && (buyUrl.length() == 0)) {
			cjProductCacheModel.buyUrl = null;
		}

		cjProductCacheModel.impressionUrl = getImpressionUrl();

		String impressionUrl = cjProductCacheModel.impressionUrl;

		if ((impressionUrl != null) && (impressionUrl.length() == 0)) {
			cjProductCacheModel.impressionUrl = null;
		}

		cjProductCacheModel.imageUrl = getImageUrl();

		String imageUrl = cjProductCacheModel.imageUrl;

		if ((imageUrl != null) && (imageUrl.length() == 0)) {
			cjProductCacheModel.imageUrl = null;
		}

		cjProductCacheModel.inStock = getInStock();

		String inStock = cjProductCacheModel.inStock;

		if ((inStock != null) && (inStock.length() == 0)) {
			cjProductCacheModel.inStock = null;
		}

		cjProductCacheModel.viewCount = getViewCount();

		cjProductCacheModel.status = getStatus();

		cjProductCacheModel.statusByUserId = getStatusByUserId();

		cjProductCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = cjProductCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			cjProductCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			cjProductCacheModel.statusDate = statusDate.getTime();
		}
		else {
			cjProductCacheModel.statusDate = Long.MIN_VALUE;
		}

		cjProductCacheModel.subtitle = getSubtitle();

		String subtitle = cjProductCacheModel.subtitle;

		if ((subtitle != null) && (subtitle.length() == 0)) {
			cjProductCacheModel.subtitle = null;
		}

		cjProductCacheModel.urlTitle = getUrlTitle();

		String urlTitle = cjProductCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			cjProductCacheModel.urlTitle = null;
		}

		cjProductCacheModel.content = getContent();

		String content = cjProductCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			cjProductCacheModel.content = null;
		}

		Date displayDate = getDisplayDate();

		if (displayDate != null) {
			cjProductCacheModel.displayDate = displayDate.getTime();
		}
		else {
			cjProductCacheModel.displayDate = Long.MIN_VALUE;
		}

		cjProductCacheModel.coverImageCaption = getCoverImageCaption();

		String coverImageCaption = cjProductCacheModel.coverImageCaption;

		if ((coverImageCaption != null) && (coverImageCaption.length() == 0)) {
			cjProductCacheModel.coverImageCaption = null;
		}

		cjProductCacheModel.coverImageFileEntryId = getCoverImageFileEntryId();

		cjProductCacheModel.coverImageURL = getCoverImageURL();

		String coverImageURL = cjProductCacheModel.coverImageURL;

		if ((coverImageURL != null) && (coverImageURL.length() == 0)) {
			cjProductCacheModel.coverImageURL = null;
		}

		cjProductCacheModel.smallImage = getSmallImage();

		cjProductCacheModel.smallImageFileEntryId = getSmallImageFileEntryId();

		cjProductCacheModel.smallImageId = getSmallImageId();

		cjProductCacheModel.smallImageURL = getSmallImageURL();

		String smallImageURL = cjProductCacheModel.smallImageURL;

		if ((smallImageURL != null) && (smallImageURL.length() == 0)) {
			cjProductCacheModel.smallImageURL = null;
		}

		return cjProductCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(81);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", productId=");
		sb.append(getProductId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", programName=");
		sb.append(getProgramName());
		sb.append(", catalogName=");
		sb.append(getCatalogName());
		sb.append(", sku=");
		sb.append(getSku());
		sb.append(", programUrl=");
		sb.append(getProgramUrl());
		sb.append(", lastUpdated=");
		sb.append(getLastUpdated());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", keywords=");
		sb.append(getKeywords());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", manufacturer=");
		sb.append(getManufacturer());
		sb.append(", manufacturerId=");
		sb.append(getManufacturerId());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", buyUrl=");
		sb.append(getBuyUrl());
		sb.append(", impressionUrl=");
		sb.append(getImpressionUrl());
		sb.append(", imageUrl=");
		sb.append(getImageUrl());
		sb.append(", inStock=");
		sb.append(getInStock());
		sb.append(", viewCount=");
		sb.append(getViewCount());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", subtitle=");
		sb.append(getSubtitle());
		sb.append(", urlTitle=");
		sb.append(getUrlTitle());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", displayDate=");
		sb.append(getDisplayDate());
		sb.append(", coverImageCaption=");
		sb.append(getCoverImageCaption());
		sb.append(", coverImageFileEntryId=");
		sb.append(getCoverImageFileEntryId());
		sb.append(", coverImageURL=");
		sb.append(getCoverImageURL());
		sb.append(", smallImage=");
		sb.append(getSmallImage());
		sb.append(", smallImageFileEntryId=");
		sb.append(getSmallImageFileEntryId());
		sb.append(", smallImageId=");
		sb.append(getSmallImageId());
		sb.append(", smallImageURL=");
		sb.append(getSmallImageURL());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(124);

		sb.append("<model><model-name>");
		sb.append("ca.efendi.datafeeds.model.CJProduct");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productId</column-name><column-value><![CDATA[");
		sb.append(getProductId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>programName</column-name><column-value><![CDATA[");
		sb.append(getProgramName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catalogName</column-name><column-value><![CDATA[");
		sb.append(getCatalogName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sku</column-name><column-value><![CDATA[");
		sb.append(getSku());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>programUrl</column-name><column-value><![CDATA[");
		sb.append(getProgramUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdated</column-name><column-value><![CDATA[");
		sb.append(getLastUpdated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>keywords</column-name><column-value><![CDATA[");
		sb.append(getKeywords());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturer</column-name><column-value><![CDATA[");
		sb.append(getManufacturer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manufacturerId</column-name><column-value><![CDATA[");
		sb.append(getManufacturerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buyUrl</column-name><column-value><![CDATA[");
		sb.append(getBuyUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>impressionUrl</column-name><column-value><![CDATA[");
		sb.append(getImpressionUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageUrl</column-name><column-value><![CDATA[");
		sb.append(getImageUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inStock</column-name><column-value><![CDATA[");
		sb.append(getInStock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewCount</column-name><column-value><![CDATA[");
		sb.append(getViewCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subtitle</column-name><column-value><![CDATA[");
		sb.append(getSubtitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>urlTitle</column-name><column-value><![CDATA[");
		sb.append(getUrlTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayDate</column-name><column-value><![CDATA[");
		sb.append(getDisplayDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coverImageCaption</column-name><column-value><![CDATA[");
		sb.append(getCoverImageCaption());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coverImageFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getCoverImageFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coverImageURL</column-name><column-value><![CDATA[");
		sb.append(getCoverImageURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smallImage</column-name><column-value><![CDATA[");
		sb.append(getSmallImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smallImageFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getSmallImageFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smallImageId</column-name><column-value><![CDATA[");
		sb.append(getSmallImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smallImageURL</column-name><column-value><![CDATA[");
		sb.append(getSmallImageURL());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CJProduct.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CJProduct.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _productId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _programName;
	private String _originalProgramName;
	private String _catalogName;
	private String _originalCatalogName;
	private String _sku;
	private String _originalSku;
	private String _programUrl;
	private String _lastUpdated;
	private String _name;
	private String _keywords;
	private String _description;
	private String _manufacturer;
	private String _originalManufacturer;
	private String _manufacturerId;
	private String _currency;
	private String _price;
	private String _buyUrl;
	private String _impressionUrl;
	private String _imageUrl;
	private String _inStock;
	private int _viewCount;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _subtitle;
	private String _urlTitle;
	private String _content;
	private Date _displayDate;
	private String _coverImageCaption;
	private long _coverImageFileEntryId;
	private String _coverImageURL;
	private boolean _smallImage;
	private long _smallImageFileEntryId;
	private long _smallImageId;
	private String _smallImageURL;
	private long _columnBitmask;
	private CJProduct _escapedModel;
}